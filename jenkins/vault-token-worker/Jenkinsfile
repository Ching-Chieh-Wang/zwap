import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
import hudson.util.Secret

pipeline {
    agent any
    parameters {
        string(name: 'SERVICE_ROLE', description: 'Vault AppRole for target service')
    }
    environment {
        VAULT_ADDR = 'http://linux-076:50006'
    }
    stages {
        stage('Mint Token') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-vault-token', variable: 'JENKINS_VAULT_TOKEN')]) {
                    script {
                        // ... your Vault requests ...
                        def token = loginJson.auth.client_token

                        // Create/Update Jenkins credential
                        def store = SystemCredentialsProvider.getInstance().getStore()
                        def creds = new StringCredentialsImpl(
                            CredentialsScope.GLOBAL,
                            "dynamic-vault-token",   // credentialsId
                            "Temporary Vault Token for ${params.SERVICE_ROLE}",
                            Secret.fromString(token)
                        )

                        // Remove old one if exists
                        def existing = store.getCredentials(Domain.global()).find { it.id == "dynamic-vault-token" }
                        if (existing) {
                            store.updateCredentials(Domain.global(), existing, creds)
                        } else {
                            store.addCredentials(Domain.global(), creds)
                        }

                        echo "[Vault Worker] Updated Jenkins credential 'dynamic-vault-token'"
                    }
                }
            }
        }
    }
}