pipeline {
    agent any
    parameters {
        string(name: 'SERVICE', description: 'Service request vault token for')
    }
    environment {
        VAULT_ADDR = 'http://linux-076:50006'
    }
    stages {
        stage('Mint Token') {
            steps {
                withCredentials([string(credentialsId: 'jenkins-vault-token', variable: 'JENKINS_VAULT_TOKEN')]) {
                    script {
                        def roleResp = httpRequest(
                            httpMode: 'GET',
                            url: "${VAULT_ADDR}/v1/auth/approle/role/${params.SERVICE}-approle/role-id",
                            customHeaders: [[name: 'X-Vault-Token', value: env.JENKINS_VAULT_TOKEN]]
                        )
                        def roleId = readJSON text: roleResp.content
                        roleId = roleId.data.role_id

                        def secretResp = httpRequest(
                            httpMode: 'POST',
                            url: "${VAULT_ADDR}/v1/auth/approle/role/${params.SERVICE}-approle/secret-id",
                            customHeaders: [[name: 'X-Vault-Token', value: env.JENKINS_VAULT_TOKEN]]
                        )
                        def secretId = readJSON text: secretResp.content
                        secretId = secretId.data.secret_id

                        def loginResp = httpRequest(
                            httpMode: 'POST',
                            url: "${VAULT_ADDR}/v1/auth/approle/login",
                            contentType: 'APPLICATION_JSON',
                            requestBody: groovy.json.JsonOutput.toJson([role_id: roleId, secret_id: secretId])
                        )
                        def loginJson = readJSON text: loginResp.content
                        def token = loginJson.auth.client_token

                        // Dynamically save the token to Jenkins Credentials store
                        def creds_store = jenkins.model.Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
                        def creds_domain = com.cloudbees.plugins.credentials.domains.Domain.global()
                        def credId = "VAULT_${params.SERVICE}.toUpperCase().replace('-', '_')_TOKEN"
                        def description = "Vault token for ${params.SERVICE}"
                        // Remove existing credential if it exists
                        def toRemove = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                            org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl.class,
                            jenkins.model.Jenkins.instance,
                            null,
                            null
                        ).find { it.id == credId }
                        if (toRemove) {
                            creds_store.removeCredentials(creds_domain, toRemove)
                        }
                        def newCred = new org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl(
                            com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
                            credId,
                            description,
                            hudson.util.Secret.fromString(token)
                        )
                        creds_store.addCredentials(creds_domain, newCred)
                        echo "[Vault Worker] Minted and stored token credential '${credId}' for ${params.SERVICE_ROLE}"
                    }
                }
            }
        }
    }
}