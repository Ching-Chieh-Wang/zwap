name=product-mongodb-sink-connector
topics=product-mongodb-write
connector.class=com.mongodb.kafka.connect.MongoSinkConnector
tasks.max=1

connection.uri=${PRODUCT_MONGODB_SERVICE_URI}
database=product
collection=products

# --- PRIMARY ID STRATEGY (Controls default _id behavior & delete.on.null.values compatibility) ---
# Set to BsonOidStrategy. This tells the connector to default to MongoDB's ObjectId generation
# IF no _id is provided by converters/post-processors.
document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy

# --- POST-PROCESSOR CHAIN (Crucial for _id from Value for Upserts) ---
# DocumentIdAdder is the default post-processor, which processes the document *before* it's
# handed to the write model. It has its *own* internal strategy for finding/generating _id.
# We explicitly set it to PartialValueStrategy to look for _id in the VALUE for updates.
post.processor.chain=com.mongodb.kafka.connect.sink.processor.DocumentIdAdder
value.projection.type=ALLOWLIST
value.projection.list=_id
# Also, explicitly tell the DocumentIdAdder what its internal ID strategy is
post.processor.document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy
post.processor.document.id.strategy.partial.value.projection={"_id": 1}

# --- WRITE MODEL STRATEGY ---
# UpdateOneDefaultStrategy will upsert. It will use _id from the value (via post-processor)
# or generate an ObjectId if no _id is found (due to BsonOidStrategy as primary).
write.strategy=com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneDefaultStrategy

# --- ENABLE DELETES (Leverages Kafka Key) ---
# This property *is* compatible with BsonOidStrategy as the primary doc.id.strategy,
# because it specifically triggers DeleteOneDefaultStrategy which uses the Kafka Key.
delete.on.null.values=true

max.batch.size=500
errors.tolerance=all
errors.log.enable=true
errors.log.include.messages=true