pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Ching-Chieh-Wang/zwap.git'
        DEPLOY_HOST = 'linux-075'
        APP_NAME = 'config-service'
    }

    triggers {
        GenericTrigger(
            token: 'xiuxiulovejingjie',
            genericVariables: [
                [
                    key: 'changed_files',
                    value: '$.commits[*].[\'modified\',\'added\',\'removed\'][*]',
                    expressionType: 'JSONPath'
                ]
            ],
            regexpFilterText: '$changed_files',
            regexpFilterExpression: '.*services/config-service/.*',
            printContributedVariables: false,
            printPostContent: false
        )
    }

    stages {
        stage('Sparse Clone Config Service') {
            steps {
                sh """
                    set -e
                    mkdir -p ~/zwap
                    cd ~/zwap

                    if [ ! -d ".git" ]; then
                        git init -b main
                        git remote add origin "${REPO_URL}"
                        git config core.sparseCheckout true
                        git sparse-checkout init --no-cone
                        git sparse-checkout set ${APP_NAME}
                        git pull origin main
                    else
                        git fetch origin
                        git reset --hard origin/main
                    fi
                """
            }
        }

        stage('Get Vault Token via Plugin') {
            steps {
                withVault([
                    vaultSecrets: [[
                        path: 'secret/config/config-service',
                        secretValues: [
                            [envVar: 'VAULT_CONFIG_SERVICE_TOKEN', vaultKey: 'VAULT_CONFIG_SERVICE_TOKEN']
                        ]
                    ]]
                ]) {
                    sh 'echo "[Vault] Token injected: $VAULT_CONFIG_SERVICE_TOKEN"'
                }
            }
        }

        stage('Build JAR') {
            steps {
                sh '''
                    set -e
                    cd ~/zwap/${APP_NAME}
                    ./mvnw clean package -DskipTests
                '''
            }
        }

        stage('Deploy to linux-075') {
            steps {
                sh '''
                    set -e
                    cd ~/zwap/${APP_NAME}
                    scp target/${APP_NAME}-*.jar ${DEPLOY_HOST}:/opt/${APP_NAME}/${APP_NAME}.jar

                    ssh ${DEPLOY_HOST} << 'EOF'
                        set -e
                        cd /opt/${APP_NAME}
                        echo "[Deploy] Restarting ${APP_NAME}..."
                        pkill -f '${APP_NAME}.jar' || true
                        export VAULT_CONFIG_SERVICE_TOKEN='${VAULT_CONFIG_SERVICE_TOKEN}'
                        nohup java -jar ${APP_NAME}.jar > app.log 2>&1 &
                    EOF
                '''
            }
        }
    }
}